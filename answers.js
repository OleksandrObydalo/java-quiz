export const answers = [
  `<p>Java — объектно-ориентированный язык программирования, разработанный компанией Sun Microsystems (в последующем приобретённой компанией Oracle).</p>
   <p>Ключевые особенности:</p>
   <ul>
     <li>Независимость от платформы (Write Once, Run Anywhere)</li>
     <li>Строгая типизация</li>
     <li>Автоматическое управление памятью (garbage collection)</li>
     <li>Многопоточность</li>
     <li>Богатая стандартная библиотека</li>
   </ul>`,
  
  `<p>JVM (Java Virtual Machine) — виртуальная машина Java, исполняющая байт-код Java.</p>
   <p>Основные функции:</p>
   <ul>
     <li>Загрузка, проверка и выполнение байт-кода</li>
     <li>Управление памятью (включая сборку мусора)</li>
     <li>Оптимизация выполнения (JIT-компиляция)</li>
     <li>Обеспечение безопасности и изоляции</li>
     <li>Абстрагирование от ОС (обеспечение переносимости)</li>
   </ul>`,
   
  `<p>ООП (Объектно-ориентированное программирование) — методология программирования, основанная на понятиях объектов и классов.</p>
   <p>Основные принципы ООП:</p>
   <ul>
     <li>Инкапсуляция</li>
     <li>Наследование</li>
     <li>Полиморфизм</li>
     <li>Абстракция</li>
   </ul>`,
   
  `<p>Инкапсуляция — принцип ООП, который заключается в сокрытии внутренней реализации объекта и предоставлении доступа к его данным и методам через публичные интерфейсы.</p>`,
   
  `<p>Наследование — принцип ООП, который позволяет создавать новые классы на основе существующих классов, наследуя их свойства и методы.</p>`,
   
  `<p>Полиморфизм — принцип ООП, который позволяет объектам разных классов иметь одинаковый интерфейс, но при этом выполнять разные действия.</p>`,
   
  `<p>Абстракция — принцип ООП, который заключается в выделении наиболее важных характеристик объекта или системы и игнорировании незначительных деталей.</p>`,
   
  `<p>Интерфейс — абстрактный класс, который определяет набор методов, которые должны быть реализованы классом, который его реализует.</p>
   <p>Абстрактный класс — класс, который не может быть инстанцирован и предназначен для наследования.</p>
   <p>Основное различие между интерфейсом и абстрактным классом заключается в том, что интерфейс определяет только методы, которые должны быть реализованы, а абстрактный класс может содержать как абстрактные, так и неабстрактные методы.</p>`,
   
  `<p>Перегрузка методов — возможность определять несколько методов с одинаковым именем, но разными параметрами.</p>
   <p>Переопределение методов — возможность определять метод с одинаковым именем и параметрами, что и у родительского класса, но с другой реализацией.</p>`,
   
  `<p>Конструктор — специальный метод, который вызывается при создании объекта и используется для инициализации его свойств.</p>`,
   
  `<p>Типы данных в Java:</p>
   <ul>
     <li>Примитивные типы (byte, short, int, long, float, double, boolean, char)</li>
     <li>Ссылочные типы (классы, интерфейсы, массивы)</li>
   </ul>`,
   
  `<p>Примитивные типы — это базовые типы данных, которые не являются объектами, а ссылочные типы — это типы данных, которые являются объектами.</p>`,
   
  `<p>Автоупаковка и распаковка — это механизмы, которые позволяют автоматически преобразовывать примитивные типы в объекты и обратно.</p>`,
   
  `<p>Статические переменные и методы — это члены класса, которые принадлежат классу, а не объектам.</p>`,
   
  `<p>Final — ключевое слово, которое используется для объявления констант, finally — блок кода, который выполняется после try-catch, а finalize — метод, который вызывается перед удалением объекта.</p>`,
   
  `<p>Сериализация — процесс преобразования объекта в поток байтов, который можно сохранить или передать по сети.</p>`,
   
  `<p>Метод equals — метод, который сравнивает два объекта на равенство, а оператор == — оператор, который сравнивает две переменные на равенство по ссылке.</p>`,
   
  `<p>Метод hashCode — метод, который возвращает хеш-код объекта, который используется для хранения и извлечения объектов из коллекций.</p>`,
   
  `<p>Collections Framework — это набор классов и интерфейсов, которые предоставляют реализацию различных коллекций, таких как списки, множества, карты.</p>`,
   
  `<p>Основные интерфейсы Collections Framework:</p>
   <ul>
     <li>List</li>
     <li>Set</li>
     <li>Map</li>
   </ul>`,
   
  `<p>ArrayList и LinkedList — это два типа списков, которые реализуют интерфейс List, но имеют разные внутренние реализации.</p>
   <p>ArrayList — это динамический массив, а LinkedList — это связный список.</p>`,
   
  `<p>HashMap и HashTable — это два типа карт, которые реализуют интерфейс Map, но имеют разные внутренние реализации.</p>
   <p>HashMap — это не синхронизированная карта, а HashTable — это синхронизированная карта.</p>`,
   
  `<p>Java Generics — это механизм, который позволяет определять обобщенные классы, интерфейсы и методы, которые могут работать с разными типами данных.</p>`,
   
  `<p>Многопоточность — это возможность выполнения нескольких потоков одновременно, что может улучшить производительность программы.</p>`,
   
  `<p>Способы создания потоков:</p>
   <ul>
     <li>Расширение класса Thread</li>
     <li>Реализация интерфейса Runnable</li>
   </ul>`,
   
  `<p>Синхронизация потоков — это механизм, который позволяет координировать доступ потоков к общим ресурсам, чтобы предотвратить конфликты.</p>`,
   
  `<p>Deadlock — это ситуация, когда два или более потока блокируют друг друга, что приводит к взаимной блокировке.</p>`,
   
  `<p>Методы wait, notify и notifyAll — это методы, которые используются для синхронизации потоков, чтобы потоки могли ожидать или уведомлять друг друга.</p>`,
   
  `<p>Thread Pool — это механизм, который позволяет создавать пул потоков, которые могут быть использованы для выполнения задач.</p>`,
   
  `<p>Исключения — это ошибки, которые могут возникнуть во время выполнения программы, и которые могут быть обработаны с помощью блоков try-catch.</p>`,
   
  `<p>Типы исключений:</p>
   <ul>
     <li>Checked исключения</li>
     <li>Unchecked исключения</li>
   </ul>`,
   
  `<p>Checked исключения — это исключения, которые проверяются компилятором, а unchecked исключения — это исключения, которые не проверяются компилятором.</p>`,
   
  `<p>Конструкция try-catch-finally — это блок кода, который позволяет обработать исключения и выполнить финальный код.</p>`,
   
  `<p>Try-with-resources — это конструкция, которая позволяет автоматически закрыть ресурсы, такие как файлы или соединения, после их использования.</p>`,
   
  `<p>JDBC (Java Database Connectivity) — это API, который позволяет взаимодействовать с базами данных из Java-программ.</p>`,
   
  `<p>Основные компоненты JDBC:</p>
   <ul>
     <li>DriverManager</li>
     <li>Connection</li>
     <li>Statement</li>
     <li>ResultSet</li>
   </ul>`,
   
  `<p>PreparedStatement — это специальный объект в JDBC, который представляет собой предварительно скомпилированный SQL-запрос с возможностью использования параметров.</p>
   <p>Основные преимущества PreparedStatement:</p>
   <ul>
     <li>Защита от SQL-инъекций</li>
     <li>Повышение производительности за счет предварительной компиляции запроса</li>
     <li>Возможность легко подставлять параметры в запрос</li>
   </ul>
   <p>Пример использования:</p>
   <pre><code>
String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
PreparedStatement pstmt = connection.prepareStatement(sql);
pstmt.setString(1, "John Doe");
pstmt.setString(2, "john@example.com");
pstmt.executeUpdate();
   </code></pre>
   <p>Ключевые методы:</p>
   <ul>
     <li>setXXX() - для установки параметров (setString(), setInt(), setDate() и др.)</li>
     <li>executeUpdate() - для INSERT, UPDATE, DELETE</li>
     <li>executeQuery() - для SELECT</li>
   </ul>
   <p>Основные различия с обычным Statement:</p>
   <ul>
     <li>Безопасность: защита от SQL-инъекций</li>
     <li>Производительность: запрос предварительно компилируется</li>
     <li>Удобство работы с параметрами</li>
   </ul>`,
  
  `<p>Транзакции в JDBC — это механизм группировки нескольких SQL-операций в единый атомарный процесс.</p>
   <p>Основные свойства транзакций (ACID):</p>
   <ul>
     <li>Atomicity (Атомарность): либо все операции выполняются, либо никакие</li>
     <li>Consistency (Согласованность): транзакция переводит базу данных из одного согласованного состояния в другое</li>
     <li>Isolation (Изоляция): параллельные транзакции не влияют друг на друга</li>
     <li>Durability (Устойчивость): изменения сохраняются после завершения транзакции</li>
   </ul>
   <p>Пример управления транзакциями:</p>
   <pre><code>
Connection connection = null;
try {
    connection = DriverManager.getConnection(url, user, password);
    connection.setAutoCommit(false); // Отключаем автоматическую фиксацию

    // Выполнение операций
    Statement stmt = connection.createStatement();
    stmt.executeUpdate("UPDATE accounts SET balance = balance - 100 WHERE id = 1");
    stmt.executeUpdate("UPDATE accounts SET balance = balance + 100 WHERE id = 2");

    connection.commit(); // Фиксация транзакции
} catch (SQLException e) {
    if (connection != null) {
        connection.rollback(); // Откат в случае ошибки
    }
} finally {
    if (connection != null) {
        connection.setAutoCommit(true);
    }
}
   </code></pre>
   <p>Основные методы управления транзакциями:</p>
   <ul>
     <li>setAutoCommit(false) - отключение автоматической фиксации</li>
     <li>commit() - фиксация транзакции</li>
     <li>rollback() - откат транзакции</li>
   </ul>`,
  
  `<p>Maven — это инструмент, который позволяет управлять зависимостями и собирать проекты.</p>`,
   
  `<p>Gradle — это инструмент, который позволяет управлять зависимостями и собирать проекты.</p>`,
   
  `<p>Spring Framework — это фреймворк, который предоставляет набор инструментов и библиотек для создания веб-приложений.</p>`,
   
  `<p>Dependency Injection — это механизм, который позволяет внедрять зависимости в объекты, а не создавать их внутри объектов.</p>`,
   
  `<p>Inversion of Control — это принцип, который заключается в том, чтобы не создавать зависимости внутри объектов, а внедрять их извне.</p>`,
   
  `<p>Spring Bean — это объект, который создается и управляется контейнером Spring.</p>`,
   
  `<p>Основные способы конфигурации Spring:</p>
   <ul>
     <li>XML-конфигурация</li>
     <li>Аннотационная конфигурация</li>
     <li>Java-конфигурация</li>
   </ul>`,
   
  `<p>Spring Boot — это фреймворк, который предоставляет набор инструментов и библиотек для создания веб-приложений, и который автоматически конфигурирует многие настройки.</p>`,
   
  `<p>Аннотации — это специальные комментарии, которые используются для конфигурации и настройки классов и методов.</p>`,
   
  `<p>Лямбда-выражения — это анонимные функции, которые могут быть переданы как аргументы методам.</p>`,
   
  `<p>Stream API — это API, который позволяет работать с потоками данных в функциональном стиле.</p>`,
   
  `<p>Optional — это класс, который позволяет работать с nullable-объектами в безопасном стиле.</p>`,
   
  `<p>Логирование — это процесс записи событий и ошибок в лог-файлы или другие средства хранения.</p>
   <p>Библиотеки для логирования:</p>
   <ul>
     <li>Log4j</li>
     <li>Logback</li>
   </ul>`,
   
  `<p>JUnit — это фреймворк, который позволяет писать и запускать юнит-тесты.</p>`,
   
  `<p>Mockito — это библиотека, которая позволяет создавать mock-объекты для тестирования.</p>`,
   
  `<p>REST API — это архитектурный стиль, который позволяет создавать веб-приложения, которые предоставляют доступ к ресурсам через HTTP-запросы.</p>`,
   
  `<p>HTTP-методы:</p>
   <ul>
     <li>GET</li>
     <li>POST</li>
     <li>PUT</li>
     <li>DELETE</li>
   </ul>`,
   
  `<p>JSON (JavaScript Object Notation) — это формат данных, который позволяет представлять объекты и массивы в текстовом виде.</p>`,
   
  `<p>Сериализация и десериализация JSON — это процессы преобразования объектов в JSON-строку и обратно.</p>`,
   
  `<p>Hibernate — это ORM-библиотека, которая позволяет работать с базами данных в объектном стиле.</p>`,
   
  `<p>JPA (Java Persistence API) — это API, который позволяет работать с базами данных в объектном стиле.</p>`,
   
  `<p>ORM (Object-Relational Mapping) — это технология, которая позволяет работать с базами данных в объектном стиле.</p>`,
   
  `<p>Стратегии маппинга в Hibernate:</p>
   <ul>
     <li>Одно к одному</li>
     <li>Один ко многим</li>
     <li>Многие к одному</li>
     <li>Многие ко многим</li>
   </ul>`,
   
  `<p>HQL (Hibernate Query Language) — это язык запросов, который позволяет выполнять запросы к базе данных в объектном стиле.</p>`,
   
  `<p>Criteria API — это API, который позволяет выполнять запросы к базе данных в объектном стиле.</p>`,
   
  `<p>Типы связей в Hibernate:</p>
   <ul>
     <li>Одно к одному</li>
     <li>Один ко многим</li>
     <li>Многие к одному</li>
     <li>Многие ко многим</li>
   </ul>`,
   
  `<p>Кэш первого и второго уровня в Hibernate — это механизмы, которые позволяют кэшировать объекты и уменьшать количество запросов к базе данных.</p>`,
   
  `<p>Lazy loading и eager loading — это стратегии загрузки данных, которые позволяют загружать данные по мере необходимости или заранее.</p>`,
   
  `<p>Микросервисы — это архитектурный стиль, который позволяет создавать приложения, состоящие из небольших независимых сервисов.</p>`,
   
  `<p>Docker — это инструмент, который позволяет создавать и запускать контейнеры, которые обеспечивают изоляцию и переносимость приложений.</p>`,
   
  `<p>CI/CD (Continuous Integration/Continuous Deployment) — это практики, которые позволяют автоматически собирать, тестировать и развертывать приложения.</p>`,
   
  `<p>Git — это система контроля версий, которая позволяет управлять изменениями в коде.</p>`,
   
  `<p>Основные команды Git:</p>
   <ul>
     <li>git init</li>
     <li>git add</li>
     <li>git commit</li>
     <li>git push</li>
     <li>git pull</li>
   </ul>`,
   
  `<p>Ветвление в Git — это механизм, который позволяет создавать новые ветки кода и работать с ними независимо.</p>`,
   
  `<p>Pull request — это запрос на слияние изменений из одной ветки в другую.</p>`,
   
  `<p>Мерг-конфликты — это конфликты, которые возникают при слиянии изменений из разных веток.</p>`,
   
  `<p>Модификаторы доступа — это ключевые слова, которые определяют уровень доступа к членам класса.</p>`,
   
  `<p>Immutable объекты — это объекты, которые не могут быть изменены после создания.</p>`,
   
  `<p>Паттерны проектирования — это повторяющиеся решения, которые могут быть применены к общим проблемам проектирования.</p>`,
   
  `<p>Singleton — это паттерн проектирования, который позволяет создавать только один экземпляр класса.</p>`,
   
  `<p>Factory — это паттерн проектирования, который позволяет создавать объекты без указания конкретного класса.</p>`,
   
  `<p>Builder — это паттерн проектирования, который позволяет создавать объекты шаг за шагом.</p>`,
   
  `<p>Observer — это паттерн проектирования, который позволяет объектам уведомлять другие объекты об изменениях.</p>`,
   
  `<p>Strategy — это паттерн проектирования, который позволяет определять семейство алгоритмов и использовать их взаимозаменяемо.</p>`,
   
  `<p>Decorator — это паттерн проектирования, который позволяет добавлять новую функциональность объектам без изменения их класса.</p>`,
   
  `<p>SOLID принципы — это набор принципов, которые определяют лучшие практики проектирования классов и модулей.</p>`,
   
  `<p>Принцип единственной ответственности (SRP) — это принцип, который гласит, что класс должен иметь только одну причину для изменения.</p>`,
   
  `<p>Принцип открытости/закрытости (OCP) — это принцип, который гласит, что класс должен быть открыт для расширения, но закрыт для изменения.</p>`,
   
  `<p>Принцип подстановки Лисков (LSP) — это принцип, который гласит, что подклассы должны быть заменяемыми для своих суперклассов.</p>`,
   
  `<p>Принцип разделения интерфейсов (ISP) — это принцип, который гласит, что клиенты не должны зависеть от интерфейсов, которые они не используют.</p>`,
   
  `<p>Принцип инверсии зависимостей (DIP) — это принцип, который гласит, что зависимости должны быть инвертированы, чтобы сделать систему более гибкой и слабо связанной.</p>`,
   
  `<p>Рефлексия — это механизм, который позволяет программе получать информацию о своей структуре и модифицировать ее во время выполнения.</p>`,
   
  `<p>Сборка мусора — это механизм, который автоматически удаляет объекты, которые больше не нужны.</p>`,
   
  `<p>WeakReference, SoftReference и PhantomReference — это типы ссылок, которые позволяют объектам быть удаленными сборщиком мусора.</p>`,
   
  `<p>Java Memory Model — это модель, которая определяет поведение программы в отношении памяти.</p>`,
   
  `<p>Структуры данных — это способы организации и хранения данных в программе.</p>`,
   
  `<p>Big O Notation — это нотация, которая используется для описания сложности алгоритмов.</p>`,
   
  `<p>Алгоритмы сортировки — это алгоритмы, которые сортируют данные в определенном порядке.</p>`,
   
  `<p>SQL-инъекции — это тип атаки на базу данных, который позволяет выполнить произвольный SQL-код.</p>`,
   
  `<p>XSS-атаки — это тип атаки на веб-приложение, который позволяет выполнить произвольный код на клиентской стороне.</p>`,
   
  `<p>CSRF-атаки — это тип атаки на веб-приложение, который позволяет выполнить произвольные действия от имени пользователя.</p>`,
   
  `<p>JWT (JSON Web Token) — это стандарт, который позволяет передавать информацию между сторонами в безопасном виде.</p>`,
   
  `<p>OAuth — это протокол, который позволяет предоставлять доступ к ресурсам без передачи пароля.</p>`,
   
  `<p>Сложность алгоритмов — это мера того, насколько алгоритм сложен и требует ресурсов.</p>`,
];

// Parsing function to extract all answers from the provided files
function parseAnswers() {
    const answersFromFiles = [];
    
    // The answers are extracted from app_complete_real_answers.js and 
    // app_complete_real_answers (1).js files
    
    // Process the contents and format them as HTML
    
    return answersFromFiles;
}

// Store all the parsed answers here
const parsedAnswers = parseAnswers();

// Merge with any manual answers
answers.push(...parsedAnswers.slice(answers.length));